"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2537],{7145:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=r(4848),a=r(8453);const s={sidebar_position:1},i="Building New Steps",o={id:"tutorials-advanced/new-steps",title:"Building New Steps",description:"Drop to python to create new custom ways to collect and process data.",source:"@site/docs/tutorials-advanced/new-steps.md",sourceDirName:"tutorials-advanced",slug:"/tutorials-advanced/new-steps",permalink:"/docs/docs/tutorials-advanced/new-steps",draft:!1,unlisted:!1,editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials-advanced/new-steps.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorials - Advanced",permalink:"/docs/docs/category/tutorials---advanced"},next:{title:"Building a Plugin",permalink:"/docs/docs/tutorials-advanced/building-plugins"}},l={},d=[{value:"Creating an Extractor",id:"creating-an-extractor",level:2},{value:"Implmenting Checkpointing (Optional)",id:"implmenting-checkpointing-optional",level:3},{value:"Creating a Transformer",id:"creating-a-transformer",level:2},{value:"Creating a Filter",id:"creating-a-filter",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"building-new-steps",children:"Building New Steps"}),"\n",(0,t.jsx)(n.p,{children:"Drop to python to create new custom ways to collect and process data."}),"\n",(0,t.jsx)(n.h2,{id:"creating-an-extractor",children:"Creating an Extractor"}),"\n",(0,t.jsx)(n.p,{children:"Nodestream has a number of built-in extractors that can be used to collect data from a variety of sources.\nHowever, you may have a need to collect data from a source that is not supported by the built-in extractors.\nIn this case, you can create a new extractor to collect data from the source.\nAn extractor is a class that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Inherits from the ",(0,t.jsx)(n.code,{children:"nodestream.pipeline:Extractor"})," class."]}),"\n",(0,t.jsxs)(n.li,{children:["Implements the ",(0,t.jsx)(n.code,{children:"async def extract_records(self)"})," method as an asynchronous generator that yields records."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The following is an example of a simple extractor from an array."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nodestream.pipeline import Extractor\n\n\nclass ArrayExtractor(Extractor):\n    def __init__(self, array):\n        self.array = array\n\n    async def extract_records(self):\n        for record in self.array:\n            yield record\n"})}),"\n",(0,t.jsx)(n.h3,{id:"implmenting-checkpointing-optional",children:"Implmenting Checkpointing (Optional)"}),"\n",(0,t.jsxs)(n.p,{children:["If you want your extractor to be resumable from a checkpoint, you can implement the\n",(0,t.jsx)(n.code,{children:"def make_checkpoint(self)"})," and ",(0,t.jsx)(n.code,{children:"async def resume_from_checkpoint(self, checkpoint)"})," methods.\nThe ",(0,t.jsx)(n.code,{children:"make_checkpoint"})," method should return a checkpoint that can be used to resume the extractor.\nA checkpoint can be any serializable object via ",(0,t.jsx)(n.code,{children:"pickle"}),".\nThe ",(0,t.jsx)(n.code,{children:"resume_from_checkpoint"})," method should take a checkpoint and resume the extractor from that point."]}),"\n",(0,t.jsxs)(n.p,{children:["The following is an updated version of the ",(0,t.jsx)(n.code,{children:"ArrayExtractor"})," that implements checkpointing.\nNodestream automatically handles storing and retrieving the checkpoint from the object store\nand calling the ",(0,t.jsx)(n.code,{children:"resume_from_checkpoint"})," method when the extractor is resumed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nodestream.pipeline import Extractor\n\n\nclass ArrayExtractor(Extractor):\n    def __init__(self, array):\n        self.array = array\n        self.index = 0\n\n    async def extract_records(self):\n        for record in self.array[self.index:]:\n            yield record\n            self.index += 1\n\n    def make_checkpoint(self):\n        return self.index\n\n    async def resume_from_checkpoint(self, checkpoint):\n        self.index = checkpoint\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-transformer",children:"Creating a Transformer"}),"\n",(0,t.jsx)(n.p,{children:"Nodestream has a number of built-in transformers that can be used to transform data in a variety of ways.\nHowever, you may have a need to transform data in a way that is not supported by the built-in transformers.\nIn this case, you can create a new transformer to transform the data."}),"\n",(0,t.jsx)(n.p,{children:"A transformer is a class that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Inherits from the ",(0,t.jsx)(n.code,{children:"nodestream.pipeline:Transformer"})," class."]}),"\n",(0,t.jsxs)(n.li,{children:["Implements the ",(0,t.jsx)(n.code,{children:"async def transform_record(self, record)"})," method that takes a record and returns an updated record."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The following is an example of a simple transformer that adds a new field to a record."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nodestream.pipeline import Transformer\n\n\nclass AddFieldTransformer(Transformer):\n    def __init__(self, field_name, field_value):\n        self.field_name = field_name\n        self.field_value = field_value\n\n    async def transform_record(self, record):\n        record[self.field_name] = self.field_value\n        return record\n"})}),"\n",(0,t.jsx)(n.p,{children:"Given the following input record:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'{\n    "field1": "value1"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Assuming the ",(0,t.jsx)(n.code,{children:"AddFieldTransformer"})," is implemented like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: my_module.transformers:AddFieldTransformer\n  arguments:\n    field_name: field2\n    field_value: value2\n"})}),"\n",(0,t.jsx)(n.p,{children:"The output would be:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'{\n    "field1": "value1",\n    "field2": "value2"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"transform_record"})," can also be a async generator that yields records.\nFor example, the following transformer takes a record and yields two records, one from two different fields."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nodestream.pipeline import Transformer\n\n\nclass LeftRightTransformer(Transformer):\n    def __init__(self, left_field, right_field):\n        self.left_field = left_field\n        self.right_field = right_field\n\n    async def transform_record(self, record):\n        yield {"record": record[self.left_field]}\n        yield {"record": record[self.right_field]}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"For example, given the following input record:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'{\n    "field1": {"nested_field": "value1"}\n    "field2": {"nested_field": "value2"}\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Assuming the ",(0,t.jsx)(n.code,{children:"LeftRightTransformer"})," is implemented like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: my_module.transformers:LeftRightTransformer\n  arguments:\n    left_field: field1\n    right_field: field2\n"})}),"\n",(0,t.jsx)(n.p,{children:"The output would be:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'{\n    "record": {"nested_field": "value1"}\n}\n{\n    "record": {"nested_field": "value2"}\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-filter",children:"Creating a Filter"}),"\n",(0,t.jsxs)(n.p,{children:["Nodestream has a number of built-in filters that can be used to filter data in a variety of ways.\nFor information on those see the guide on ",(0,t.jsx)(n.a,{href:"../../tutorials-intermediate/filtering-data",children:"Filtering Data"})," or the ",(0,t.jsx)(n.a,{href:"../../reference/filters",children:"Filters Reference"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"However, you may have a need to filter data in a way that is not supported by the built-in filters.\nIn this case, you can create a new filter to filter the data."}),"\n",(0,t.jsx)(n.p,{children:"A filter is a class that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Inherits from the ",(0,t.jsx)(n.code,{children:"nodestream.pipeline:Filter"})," class."]}),"\n",(0,t.jsxs)(n.li,{children:["Implements the ",(0,t.jsx)(n.code,{children:"async def filter_record(self, record)"})," method that takes a record and returns a boolean value indicating whether the record should be included in the output."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The following is an example of a simple filter that filters records based on a field value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nodestream.pipeline import Filter\n\n\nclass IsEvenFilter(Filter):\n    def __init__(self, field_name):\n        self.field_name = field_name\n\n    async def filter_record(self, record):\n        # Return True if the value of the field is even, False otherwise\n        return record[self.field_name] % 2 == 0\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);