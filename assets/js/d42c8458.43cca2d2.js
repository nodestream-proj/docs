"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2289],{5799:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var t=r(4848),a=r(8453),s=r(9489),i=r(7227);const o={sidebar_position:4},l="Extending the DSL",d={id:"tutorials-advanced/extending-the-dsl",title:"Extending the DSL",description:"Extend the Nodestream DSL to create new ways to collect and process data.",source:"@site/docs/tutorials-advanced/extending-the-dsl.mdx",sourceDirName:"tutorials-advanced",slug:"/tutorials-advanced/extending-the-dsl",permalink:"/docs/docs/tutorials-advanced/extending-the-dsl",draft:!1,unlisted:!1,editUrl:"https://github.com/nodesteram-proj/docs/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials-advanced/extending-the-dsl.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Extending the CLI",permalink:"/docs/docs/tutorials-advanced/extending-the-cli"},next:{title:"Database Support",permalink:"/docs/docs/category/database-support"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"Supporting New File Types",id:"supporting-new-file-types",level:2},{value:"Implementing a New File Type",id:"implementing-a-new-file-type",level:3},{value:"Registering the New File Type",id:"registering-the-new-file-type",level:3},{value:"Using the New File Type",id:"using-the-new-file-type",level:3},{value:"Creating an Interpretation",id:"creating-an-interpretation",level:2},{value:"Implementing a New Interpretation",id:"implementing-a-new-interpretation",level:3},{value:"Registering the New Interpretation",id:"registering-the-new-interpretation",level:3},{value:"Using an Interpretation",id:"using-an-interpretation",level:3},{value:"Creating a Value Provider",id:"creating-a-value-provider",level:2},{value:"Implementing a New Value Provider",id:"implementing-a-new-value-provider",level:3},{value:"Registering the New Value Provider",id:"registering-the-new-value-provider",level:3},{value:"Using a Value Provider",id:"using-a-value-provider",level:3},{value:"Creating a Normalizer",id:"creating-a-normalizer",level:2},{value:"Implementing a New Normalizer",id:"implementing-a-new-normalizer",level:3},{value:"Registering the New Normalizer",id:"registering-the-new-normalizer",level:3},{value:"Using a Normalizer",id:"using-a-normalizer",level:3},{value:"Creating an Argument Resolver",id:"creating-an-argument-resolver",level:2},{value:"Implementing a New Argument Resolver",id:"implementing-a-new-argument-resolver",level:3},{value:"Registering the New Argument Resolver",id:"registering-the-new-argument-resolver",level:3},{value:"Using an Argument Resolver",id:"using-an-argument-resolver",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"extending-the-dsl",children:"Extending the DSL"}),"\n",(0,t.jsx)(n.p,{children:"Extend the Nodestream DSL to create new ways to collect and process data."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The Nodestream DSL is a powerful way to define how data is collected and modeled as a graph.\nYou can extend the DSL to create new ways to collect and process data.\nYou can either include these customizations an a ",(0,t.jsx)(n.a,{href:"../building-plugins",children:"plugin"})," or as a part of your own codebase."]}),"\n",(0,t.jsx)(n.h2,{id:"supporting-new-file-types",children:"Supporting New File Types"}),"\n",(0,t.jsxs)(n.p,{children:["As documented in the ",(0,t.jsx)(n.a,{href:"../../reference/extractors#the-file-extractor",children:"File Extractor Family"})," section, nodestream supports a variety of file types.\nYou can add support for new file types by creating a ",(0,t.jsx)(n.a,{href:"../new-steps#creating-an-extractor",children:"new extractor"})," or by extending the existing extractors by introducing a supported file type.\nIt is best to prefer the latter approach but if you need to create a new extractor, you can read the ",(0,t.jsx)(n.a,{href:"../new-steps#creating-an-extractor",children:"Creating a New Extractor"})," section.\nThis section will guide you through the process of creating a new file type support."]}),"\n",(0,t.jsx)(n.h3,{id:"implementing-a-new-file-type",children:"Implementing a New File Type"}),"\n",(0,t.jsxs)(n.p,{children:["To start, you need to create a new file type handler class.\nTo do so, subclaas from the ",(0,t.jsx)(n.code,{children:"SupportedFileFormat"})," class and stub the ",(0,t.jsx)(n.code,{children:"read_file_from_handle"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nodestream.extractors.files import SupportedFileFormat\n\nclass TabbedSeperatedValues(SupportedFileFormat, alias=".tsv"):\n    def read_file_from_handle(self, fp) -> Iterable[dict]:\n        ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"read_file_from_handle"})," method should return an iterable of dictionaries, where each dictionary represents a row in the file.\nThe keys of the dictionary should be the column names and the values should be the values in the row.\nBy default, the ",(0,t.jsx)(n.code,{children:"fp"})," variable is a read handle to the file in ",(0,t.jsx)(n.code,{children:"bytes"})," mode.\nOften times, you will want to read the file in text mode, so you can use the ",(0,t.jsx)(n.code,{children:"io.TextIOWrapper"})," class to wrap the file handle in text mode."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from io import TextIOWrapper\nfrom nodestream.extractors.files import SupportedFileFormat\n\nclass TabbedSeperatedValues(SupportedFileFormat, alias=".tsv"):\n    reader = TextIOWrapper\n\n    def read_file_from_handle(self, text_fp) -> Iterable[dict]:\n            for line in text_fp:\n                ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the ",(0,t.jsx)(n.code,{children:"reader"})," attribute is set to ",(0,t.jsx)(n.code,{children:"TextIOWrapper"})," to indicate that the file should be wrapped in a ",(0,t.jsx)(n.code,{children:"TextIOWrapper"})," object.\nThe ",(0,t.jsx)(n.code,{children:"read_file_from_handle"})," method is now expecting a text file handle and can read the file line by line.\nThus, we can now use the ",(0,t.jsx)(n.code,{children:"csv"})," module to parse the file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from csv import DictReader\nfrom io import TextIOWrapper\n\nfrom nodestream.extractors.files import SupportedFileFormat\n\n\nclass TabbedSeperatedValues(SupportedFileFormat, alias=".tsv"):\n    reader = TextIOWrapper\n\n    def read_file_from_handle(self, text_fp) -> Iterable[dict]:\n        for row in DictReader(text_fp, delimiter="\\t"):\n            yield row\n'})}),"\n",(0,t.jsx)(n.h3,{id:"registering-the-new-file-type",children:"Registering the New File Type"}),"\n",(0,t.jsxs)(n.p,{children:["File types are registered via the ",(0,t.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package.\nSpecifically, the ",(0,t.jsx)(n.code,{children:"entry_point"})," named ",(0,t.jsx)(n.code,{children:"files"})," inside of the ",(0,t.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded.\nThe entry point provided should be a module which has atleast one subclass of ",(0,t.jsx)(n.code,{children:"nodestream.extractors.files:SupportedFileFormat"})," as directed above.\nEach subclass will be registered as an ",(0,t.jsx)(n.code,{children:"SupportedFileFormat"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Depending on how you are building your package, you can register your audit plugin in one of the following ways:"}),"\n",(0,t.jsxs)(s.A,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,t.jsx)(i.A,{value:"pyproject",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\nfiles = "my_python_package.files"\n'})})}),(0,t.jsx)(i.A,{value:"poetry",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\nfiles = "my_python_package.files"\n'})})}),(0,t.jsx)(i.A,{value:"setup-cfg",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    files = my_python_package.files\n"})})}),(0,t.jsx)(i.A,{value:"setup-py",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'files = nodestream_plugin_cool.files',\n        ]\n    }\n)\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"using-the-new-file-type",children:"Using the New File Type"}),"\n",(0,t.jsx)(n.p,{children:"Once the new file type is registered, it can be used in the DSL as a file extractor.\nThe file extractors will automatically be aware of and use the new file type."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- implementation: nodestream.pipeline.extractors:FileExtractor\n  arguments:\n    globs:\n      - data/*.tsv\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-an-interpretation",children:"Creating an Interpretation"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"../../reference/interpreting#interpretations",children:"Interpreations"})," that are built into nodestream are powerful tools for mapping the data into a graph.\nHowever, you may need to create a new interpretation to handle a specific use case.\nThis section will guide you through the process of creating a new interpretation.\nBefore venturing down this path, it is recommended to read the ",(0,t.jsx)(n.a,{href:"../../reference/interpreting",children:"Interpreting References"})," as well as the ",(0,t.jsx)(n.a,{href:"../../tutorials-intermediate/source-nodes",children:"Source Node"})," and ",(0,t.jsx)(n.a,{href:"../../tutorials-intermediate/relationship-building-techniques",children:"Relationship Building"})," tutorials thoroughly to understand the concepts, best practices, and the existing interpretations."]}),"\n",(0,t.jsx)(n.h3,{id:"implementing-a-new-interpretation",children:"Implementing a New Interpretation"}),"\n",(0,t.jsxs)(n.p,{children:["To start, you need to create a new interpretation class.\nTo do so, subclass from the ",(0,t.jsx)(n.code,{children:"Interpretation"})," class and stub the ",(0,t.jsx)(n.code,{children:"interpret"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nodestream.interpreting import Interpretation\nfrom nodestream.pipeline.value_providers import ProviderContext\n\n\nclass MyInterpretation(Interpretation):\n     def interpret(self, context: ProviderContext):\n        ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"interpret"})," method should use the ",(0,t.jsx)(n.code,{children:"context"})," object to create nodes and relationships in the graph.\nThe ",(0,t.jsx)(n.code,{children:"context"})," object has methods for creating nodes and relationships, as well as methods for querying the graph and the underlying data being interpreted."]}),"\n",(0,t.jsx)(n.p,{children:"For example, let's say we want to store the positive and negative values of a boolean property in the graph."}),"\n",(0,t.jsxs)(n.p,{children:["For example, if we want to have a ",(0,t.jsx)(n.code,{children:"live"})," and ",(0,t.jsx)(n.code,{children:"archived"})," node ",(0,t.jsx)(n.code,{children:"Posts"}),", we can create a new interpretation to handle this."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from nodestream.interpreting import Interpretation\nfrom nodestream.pipeline.value_providers import ProviderContext, StaticValueOrValueProvider, ValueProvider\n\n\nclass PositiveNegativeProperty(Interpretation, alias="pos_negative"):\n    def __init__(self, positive_property_name: str, negative_property_name: str, value: StaticValueOrValueProvider):\n        self.positive_property_name = positive_property_name\n        self.negative_property_name = negative_property_name\n        self.value = ValueProvider.guarantee_value_provider(value)\n\n    def interpret(self, context: ProviderContext):\n        source_node = context.desired_ingest.source\n        value = self.value.single_value(context)\n        source_node.properties.set(self.positive_property_name, value)\n        source_node.properties.set(self.negative_property_name, not value)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["There is a lot there, so lets break it down.\nFirst, we have the ",(0,t.jsx)(n.code,{children:"__init__"})," method which takes in the ",(0,t.jsx)(n.code,{children:"positive_property_name"}),", ",(0,t.jsx)(n.code,{children:"negative_property_name"}),", and ",(0,t.jsx)(n.code,{children:"value"})," arguments.\nThese values are directly passed from the Yaml location.\nThe ",(0,t.jsx)(n.code,{children:"value"})," argument is wrapped in a ",(0,t.jsx)(n.code,{children:"ValueProvider"})," to ensure that it is a ",(0,t.jsx)(n.code,{children:"ValueProvider"})," object and not a static value."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"interpret"})," method is where the magic happens.\nThe ",(0,t.jsx)(n.code,{children:"context"})," object is used to get the source node and set the properties on the node.\nThen ",(0,t.jsx)(n.code,{children:"value"})," is retrieved from the ",(0,t.jsx)(n.code,{children:"value"})," argument and set on the source node as the ",(0,t.jsx)(n.code,{children:"positive_property_name"}),".\nThen ",(0,t.jsx)(n.code,{children:"not value"})," is set on the source node as the ",(0,t.jsx)(n.code,{children:"negative_property_name"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"registering-the-new-interpretation",children:"Registering the New Interpretation"}),"\n",(0,t.jsxs)(n.p,{children:["Interpretations are registered via the ",(0,t.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package.\nSpecifically, the ",(0,t.jsx)(n.code,{children:"entry_point"})," named ",(0,t.jsx)(n.code,{children:"interpretations"})," inside of the ",(0,t.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded.\nThe entry point provided should be a module which has atleast one subclass of ",(0,t.jsx)(n.code,{children:"nodestream.interpreting:Interpretation"})," as directed above.\nEach subclass will be registered as an ",(0,t.jsx)(n.code,{children:"Interpretation"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Depending on how you are building your package, you can register your audit plugin in one of the following ways:"}),"\n",(0,t.jsxs)(s.A,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,t.jsx)(i.A,{value:"pyproject",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\ninterpretations = "my_python_package.interpretations"\n'})})}),(0,t.jsx)(i.A,{value:"poetry",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\ninterpretations = "my_python_package.interpretations"\n'})})}),(0,t.jsx)(i.A,{value:"setup-cfg",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    interpretations = my_python_package.interpretations\n"})})}),(0,t.jsx)(i.A,{value:"setup-py",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'interpretations = nodestream_plugin_cool.interpretations',\n        ]\n    }\n)\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"using-an-interpretation",children:"Using an Interpretation"}),"\n",(0,t.jsx)(n.p,{children:"Once the new interpretation is registered, it can be used in the DSL as an interpretation.\nThe interpretations will automatically be aware of and use the new interpretation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"-  type: pos_negative\n   positive_property_name: live\n   negative_property_name: archived\n   value: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-value-provider",children:"Creating a Value Provider"}),"\n",(0,t.jsxs)(n.p,{children:["There are many methods of extracting and providing data to the ETl pipeline as it operates.\nThe various yaml tags such as ",(0,t.jsx)(n.code,{children:"!jmespath"})," or ",(0,t.jsx)(n.code,{children:"!variable"})," refer to an underlying ValueProvider.\nYou can create your own ValueProvider to provide data to the pipeline."]}),"\n",(0,t.jsx)(n.h3,{id:"implementing-a-new-value-provider",children:"Implementing a New Value Provider"}),"\n",(0,t.jsxs)(n.p,{children:["To start, you need to create a new value provider class.\nTo do so, subclass from the ",(0,t.jsx)(n.code,{children:"ValueProvider"})," class and stub the ",(0,t.jsx)(n.code,{children:"single_value"})," and ",(0,t.jsx)(n.code,{children:"many_values"})," methods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from nodestream.pipeline.value_providers import ValueProvider, ProviderContext\n\nclass HashValueProvider(ValueProvider):\n    def single_value(self, context: ProviderContext) -> Any:\n        ...\n\n    def many_values(self, context: ProviderContext) -> Iterable[Any]:\n        ...\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this case, we're going to hash values coming from a wrapped value provider."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from hashlib import sha256\n\nfrom nodestream.pipeline.value_providers import ValueProvider, ProviderContext\n\nclass HashValueProvider(ValueProvider):\n    def __init__(self, wrapped: ValueProvider):\n        self.wrapped = wrapped\n\n    def hash(self, value: Any) -> str:\n        return sha256(str(value).encode()).hexdigest()\n\n    def single_value(self, context: ProviderContext) -> Any:\n        return self.hash(self.wrapped.single_value(context))\n\n    def many_values(self, context: ProviderContext) -> Iterable[Any]:\n        for value in self.wrapped.many_values(context):\n            yield self.hash(value)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we take a value from the wrapped value provider and hash it using sha256.\nNow we need to wire it into the DSL.\n",(0,t.jsx)(n.code,{children:"nodestream"})," uses ",(0,t.jsx)(n.code,{children:"pyyaml"})," to parse the yaml files, so we need to add a constructor to the ",(0,t.jsx)(n.code,{children:"HashValueProvider"})," class."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class HashValueProvider(ValueProvider):\n    # ... \n\n    @classmethod\n    def install_yaml_tag(cls, loader: Type[SafeLoader]):\n        loader.add_constructor(\n            "!hash", lambda loader, node: cls(value_provider_to_hash=loader.construct_mapping(node)["hash_value"])\n        )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will allow us to use the ",(0,t.jsx)(n.code,{children:"!hash"})," tag in the yaml file to create a new ",(0,t.jsx)(n.code,{children:"HashValueProvider"}),".\nIn this case, we are expecting a mapping with a ",(0,t.jsx)(n.code,{children:"hash_value"})," key that will be passed to the ",(0,t.jsx)(n.code,{children:"HashValueProvider"})," constructor.\nThat would look like this in the yaml file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- type: source_node\n  node_type: Metric\n  key:\n    value: !hash\n      hash_value: !jmespath value\n"})}),"\n",(0,t.jsx)(n.h3,{id:"registering-the-new-value-provider",children:"Registering the New Value Provider"}),"\n",(0,t.jsx)(n.p,{children:"In order to register the new ValueProvider, you need to add an entry point to your package."}),"\n",(0,t.jsxs)(n.p,{children:["Value Providers are registered via the ",(0,t.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package.\nSpecifically, the ",(0,t.jsx)(n.code,{children:"entry_point"})," named ",(0,t.jsx)(n.code,{children:"value_providers"})," inside of the ",(0,t.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded.\nEvery Value Provider is expected to be a subclass of ",(0,t.jsx)(n.code,{children:"nodestream.pipeline.value_providers:ValueProvider"})," as directed above."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"entry_point"})," should be a module that contains at least one ",(0,t.jsx)(n.code,{children:"ValueProvider"})," class.\nAt runtime, the module will be loaded and all classes that inherit from ",(0,t.jsx)(n.code,{children:"nodestream.pipeline.value_providers:ValueProvider"})," will be registered."]}),"\n",(0,t.jsxs)(s.A,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,t.jsx)(i.A,{value:"pyproject",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\nnormalizers = "my_python_package.normalizers"\n'})})}),(0,t.jsx)(i.A,{value:"poetry",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\nnormalizers = "my_python_package.normalizers"\n'})})}),(0,t.jsx)(i.A,{value:"setup-cfg",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    normalizers = my_python_package.normalizers\n"})})}),(0,t.jsx)(i.A,{value:"setup-py",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'normalizers = nodestream_plugin_cool.normalizers',\n        ]\n    }\n)\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"using-a-value-provider",children:"Using a Value Provider"}),"\n",(0,t.jsx)(n.p,{children:"As mentioned above, you can now use your value provider in the DSL."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- type: source_node\n  node_type: Metric\n  key:\n    value: !hash\n      hash_value: !jmespath value\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-normalizer",children:"Creating a Normalizer"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"Normalizer"})," allows you to clean data extracted by a ",(0,t.jsx)(n.code,{children:"ValueProvider"}),". They are intended to provided stateless, simple\ntransformations of data. Nodestream has some built in ones that you can view ",(0,t.jsx)(n.a,{href:"../../reference/interpreting#normalizers",children:"here"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example, assume that you have numeric numbers that should be rounded to a whole number before being used.\nLet's build a normalizer that does this for us."}),"\n",(0,t.jsx)(n.h3,{id:"implementing-a-new-normalizer",children:"Implementing a New Normalizer"}),"\n",(0,t.jsxs)(n.p,{children:["To start, you need to create a new normalizer class.\nTo do so, subclass from the ",(0,t.jsx)(n.code,{children:"Normalizer"})," class and stub the ",(0,t.jsx)(n.code,{children:"normalize"})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from typing import Any\n\nfrom nodestream.pipeline.normalizers import Normalizer\n\nclass RoundToWholeNumber(Normalizer, alias="round_numbers"):\n    def normalize_value(self, value: Any) -> Any:\n        return int(value) if isinstance(value, float) else value\n'})}),"\n",(0,t.jsx)(n.p,{children:"In this example, we take a value and round it to a whole number if it is a float.\nIf it is not a float, we return the value as is."}),"\n",(0,t.jsx)(n.h3,{id:"registering-the-new-normalizer",children:"Registering the New Normalizer"}),"\n",(0,t.jsxs)(n.p,{children:["Normalizers are registered via the ",(0,t.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package. Specifically, the ",(0,t.jsx)(n.code,{children:"entry_point"})," named ",(0,t.jsx)(n.code,{children:"normalizers"})," inside of the ",(0,t.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded. Every Value Provider is expected to be a subclass of ",(0,t.jsx)(n.code,{children:"nodestream.pipeline.normalizers:Normalizer"})," as directed above."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"entry_point"})," should be a module that contains at least one ",(0,t.jsx)(n.code,{children:"Normalizer"})," class. At runtime, the module will be loaded and all classes that inherit from ",(0,t.jsx)(n.code,{children:"nodestream.pipeline.normalizers:Normalizer"})," will be registered."]}),"\n",(0,t.jsxs)(s.A,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,t.jsx)(i.A,{value:"pyproject",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\nnormalizers = "my_python_package.normalizers"\n'})})}),(0,t.jsx)(i.A,{value:"poetry",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\nnormalizers = "my_python_package.normalizers"\n'})})}),(0,t.jsx)(i.A,{value:"setup-cfg",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    normalizers = my_python_package.normalizers\n"})})}),(0,t.jsx)(i.A,{value:"setup-py",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'normalizers = nodestream_plugin_cool.normalizers',\n        ]\n    }\n)\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"using-a-normalizer",children:"Using a Normalizer"}),"\n",(0,t.jsxs)(n.p,{children:["You can now use your normalizer in sections that handle normalization flags. For more information,\nsee the ",(0,t.jsx)(n.a,{href:"../../reference/interpreting",children:"Interpretation's reference"}),". For example, if you are using this\nin a source node interpretation, you could use it as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"interpretations:\n  - type: source_node\n    node_type: Metric\n    key:\n      value: !jmespath value\n    normalization:\n      do_round_numbers: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-an-argument-resolver",children:"Creating an Argument Resolver"}),"\n",(0,t.jsxs)(n.p,{children:["A ArgumentResolver allows you to inline a value into the Pipeline or project file before the pipeline is initialized.\nFor more information, see the ",(0,t.jsx)(n.a,{href:"../../tutorials-intermediate/configuring-projects",children:"Configuring Projects and Pipelines"}),".\nThis can be useful for passing configuration from files, environment, secret stores, and the like."]}),"\n",(0,t.jsx)(n.h3,{id:"implementing-a-new-argument-resolver",children:"Implementing a New Argument Resolver"}),"\n",(0,t.jsxs)(n.p,{children:["Definfing a new argument resolver is simple. You need to subclass from the ",(0,t.jsx)(n.code,{children:"ArgumentResolver"})," class and implement the ",(0,t.jsx)(n.code,{children:"resolve_arugment"})," method.\nFor example, let's create an argument resolver that retrieves a secret from ",(0,t.jsx)(n.a,{href:"https://aws.amazon.com/secrets-manager/",children:"amazon's secret manager"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import boto3\n\nfrom nodestream.pipeline.argument_resolvers import ArgumentResolver\n\n\nclass SecretResolver(ArgumentResolver, alias="secret"):\n    @staticmethod\n    def resolve_argument(variable_name):\n        client = boto3.client("secretsmanager")\n        return client.get_secret_value(SecretId=variable_name)["SecretString"]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"registering-the-new-argument-resolver",children:"Registering the New Argument Resolver"}),"\n",(0,t.jsxs)(n.p,{children:["ArgumentResolvers are registered via the ",(0,t.jsx)(n.a,{href:"https://setuptools.pypa.io/en/latest/userguide/entry_point.html#entry-points-for-plugins",children:"entry_points"})," API of a Python Package. Specifically, the ",(0,t.jsx)(n.code,{children:"entry_point"})," named ",(0,t.jsx)(n.code,{children:"argument_resolvers"})," inside of the ",(0,t.jsx)(n.code,{children:"nodestream.plugins"})," group is loaded. It is expected to be a subclass of ",(0,t.jsx)(n.code,{children:"nodestream.pipeline.argument_resolvers:ArgumentResolver"})," as directed above."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"entry_point"})," should be a module that contains at least one argument resolver class. At runtime, the module will be loaded and all classes that inherit from ",(0,t.jsx)(n.code,{children:"nodestream.pipeline.argument_resolvers:ArgumentResolver"})," will be registered."]}),"\n",(0,t.jsxs)(s.A,{defaultValue:"pyproject",values:[{label:"pyproject.toml",value:"pyproject"},{label:"poetry",value:"poetry"},{label:"setup.cfg",value:"setup-cfg"},{label:"setup.py",value:"setup-py"}],children:[(0,t.jsx)(i.A,{value:"pyproject",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[project.entry-points."nodestream.plugins"]\nargument_resolvers = "my_python_package.argument_resolvers"\n'})})}),(0,t.jsx)(i.A,{value:"poetry",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[tool.poetry.plugins."nodestream.plugins"]\nargument_resolvers = "my_python_package.argument_resolvers"\n'})})}),(0,t.jsx)(i.A,{value:"setup-cfg",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"[options.entry_points]\nnodestream.plugins =\n    argument_resolvers = my_python_package.argument_resolvers\n"})})}),(0,t.jsx)(i.A,{value:"setup-py",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from setuptools import setup\n\nsetup(\n    # ...,\n    entry_points = {\n        'nodestream.plugins': [\n            'argument_resolvers = nodestream_plugin_cool.argument_resolvers',\n        ]\n    }\n)\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"using-an-argument-resolver",children:"Using an Argument Resolver"}),"\n",(0,t.jsxs)(n.p,{children:["You can now use your argument resolver in sections that handle argument resolution. For more information, see the ",(0,t.jsx)(n.a,{href:"../../tutorials-intermediate/configuring-projects",children:"Configuring Projects and Pipelines"}),". For example, if you are using this in a pipeline file, you could use it as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"arguments:\n  - name: !secret my_secret_key_in_secrets_manager\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},7227:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var t=r(4164);const a={tabItem:"tabItem_Ymn6"};var s=r(4848);function i(e){let{children:n,hidden:r,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,i),hidden:r,children:n})}},9489:(e,n,r)=>{r.d(n,{A:()=>b});var t=r(6540),a=r(4164),s=r(4245),i=r(6347),o=r(6494),l=r(2814),d=r(5167),c=r(1269);function p(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}}))}(r);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function h(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:r}=e;const a=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,s=u(e),[i,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[d,p]=m({queryString:r,groupId:a}),[g,v]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,c.Dv)(r);return[a,(0,t.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:a}),x=(()=>{const e=d??g;return h({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{x&&l(x)}),[x]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),v(e)}),[p,v,s]),tabValues:s}}var v=r(1062);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(4848);function y(e){let{className:n,block:r,selectedValue:t,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const n=e.currentTarget,r=l.indexOf(n),a=o[r].value;a!==t&&(d(n),i(a))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},n),children:o.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:p,onClick:c,...s,className:(0,a.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function j(e){let{lazy:n,children:r,selectedValue:a}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function _(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,f.jsx)(y,{...e,...n}),(0,f.jsx)(j,{...e,...n})]})}function b(e){const n=(0,v.A)();return(0,f.jsx)(_,{...e,children:p(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);